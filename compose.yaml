services:
  flyway:
    image: flyway/flyway:latest
    command: -url=jdbc:postgresql://postgres:5432/auth_service_db -user=myuser -password=secret migrate
    volumes:
      - ./backend/auth_service/src/main/resources/db/migration:/flyway/sql
    depends_on:
      - postgres

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=auth_service_db'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d auth_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  data-provider:
    build:
      context: ./backend/data-provider
      dockerfile: Dockerfile
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"
    env_file:
      - ./backend/data-provider/.env
    environment:
      # CA_CERT_PATH 這裡的值要指向容器內部掛載後的路徑
      - CA_CERT_PATH=/app/certs/Sinopac.pfx
    volumes:
      # 這裡將本地 Windows 路徑的檔案掛載到容器內部的指定路徑
      - "C:/Users/matt9/Downloads/Sinopac.pfx:/app/certs/Sinopac.pfx"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  account-service:
    build:
      context: ./backend/account_service
      dockerfile: Dockerfile
    # ports:
    #   - "8082:8082"
    expose:
      - "8082"
    environment:
      - DATA_PROVIDER_URL=http://data-provider:8000
      - DATA_PROVIDER_TIMEOUT=5000
    depends_on:
      data-provider:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  auth-service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    # ports:
    #   - "8081:8081"
    expose:
      - "8081"
    environment:
      - DB_URL=jdbc:postgresql://postgres:5432/auth_service_db
      - DB_USERNAME=myuser
      - DB_PASSWORD=secret
    depends_on:
      - postgres
  
  backtest-service:
    build:
      context: ./backend/backtest_service
      dockerfile: Dockerfile
    expose:
      - "8084"
    environment:
      - DATA_PROVIDER_URL=http://data-provider:8000
      - DATA_PROVIDER_TIMEOUT=10000
    depends_on:
      data-provider:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://api-gateway:8080/api
    depends_on:
      - auth-service
      - api-gateway

  api-gateway:
    build:
      context: ./backend/api_gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - account-service
      - backtest-service
      - subscribe-service

  subscribe-service:
    build:
      context: ./backend/subscribe_service
      dockerfile: Dockerfile
    expose:
      - "8083"
    environment:
      - DATA_PROVIDER_URL=http://data-provider:8000
      - DATA_PROVIDER_TIMEOUT=10000
    depends_on:
      data-provider:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data: